---
steps:
  # build image
  - name: gcr.io/cloud-builders/docker
    args: [ build, -t, gcr.io/$PROJECT_ID/mac-to-vendor:$BUILD_ID, .]

  # kaniko cache build (https://cloud.google.com/cloud-build/docs/kaniko-cache)
  # - name: gcr.io/kaniko-project/executor:debug #:latest
  #   args:
  #   - --destination="gcr.io/$PROJECT_ID/mac-to-vendor:$BUILD_ID"
  #   - --cache=true
  #   - --cache-ttl=24h

  # push image
  - name: gcr.io/cloud-builders/docker
    args: [ push, gcr.io/$PROJECT_ID/mac-to-vendor:$BUILD_ID ]

  # branch filter hack from: https://github.com/GoogleCloudPlatform/cloud-builders/issues/138
  # deploy to gcp cloud-run
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "master" ]]; then
          gcloud beta run deploy \
            mac-to-vendor \
            --image="gcr.io/$PROJECT_ID/mac-to-vendor:$BUILD_ID" \
            --project="$PROJECT_ID" \
            --platform="managed" \
            --region="us-central1" \
            --allow-unauthenticated
        fi
    # args: [ beta, run, deploy, mac-to-vendor, --allow-unauthenticated, --image=gcr.io/$PROJECT_ID/mac-to-vendor:$BUILD_ID, --region=us-central1, --project=joe-mac-to-vendor ]

# we are both pushing the image as a step above so that the deployment step will succeed, and also using
# the 'images:' list to store the image for reasons defined in the docs - https://cloud.google.com/cloud-build/docs/configuring-builds/store-images-artifacts#storing_images_in
images:
  - gcr.io/$PROJECT_ID/mac-to-vendor:$BUILD_ID